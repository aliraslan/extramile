{"version":3,"sources":["components/DriverView.tsx","components/Landing.tsx","components/NotFound.tsx","components/Login.tsx","components/Map.tsx","components/Register.tsx","components/TrackTrip.tsx","apolloClient.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DriverView","react_default","a","createElement","LandingView","react_apollo_browser_umd","query","gql","_templateObject","_ref","data","loading","error","JSON","stringify","Connection","NotFound","LoginMutation","Login_templateObject","Login","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","mutation","login","Redirect","to","className","input","prefix","icon","type","style","color","placeholder","value","onChange","e","target","position","top","left","width","es_button","onClick","variables","Link","onSuggestSelect","suggest","console","log","label","location","lat","toString","lng","MapView","MyMap","withScriptjs","withGoogleMap","props","react_google_maps_lib","defaultZoom","defaultCenter","defaultOptions","disableDefaultUI","height","textAlign","Geosuggest_esm","isMarkerShown","googleMapURL","loadingElement","containerElement","mapElement","RegisterMutation","Register_templateObject","Register","_useState5","_useState6","firstName","setFirstName","_useState7","_useState8","lastName","setLastName","_useState9","_useState10","phone","setPhone","register","TRACK_TRIP_SUBSCRIPTION","TrackTrip_templateObject","TrackTrip","_ref$tripId","tripId","subscription","_ref2","_data$TripLocation$lo","TripLocation","x","y","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_getMainDefinition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e83d8d84.chunk.js","sourcesContent":["import React from 'react';\n\nexport const DriverView = () => {\n  return (\n    <div>\n      Driver View!\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nexport const LandingView = () => {\n  return (\n    <Query\n      query={gql`\n        {\n          Connection\n        }\n      `}\n    >\n      {({ data, loading, error }) => {\n        if (loading) return <div>Loading...</div>;\n\n        if (error) return <div>Error: {JSON.stringify(error)}</div>;\n\n        return (\n          <div>{data.Connection} your App is connected to the backend!</div>\n        );\n      }}\n    </Query>\n  );\n};\n","import React from 'react';\n\nexport const NotFound = () => {\n  return (\n    <div>\n      404 NOT FOUND\n    </div>\n  );\n};\n\n\n","import React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\nimport { Redirect } from \"react-router\";\nimport { Button, Icon, Input } from \"antd\";\nimport \"./styling/Pronto.css\";\nimport { Link } from \"react-router-dom\";\n\nconst LoginMutation = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    Login(email: $email, password: $password) {\n      id\n      firstName\n    }\n  }\n`;\n\nexport const Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <Mutation mutation={LoginMutation}>\n      {(login, { data, loading, error }) => {\n        if (data) {\n          // you're now logged in!\n          return <Redirect to=\"/map\"/>; // Pending change\n        }\n\n        return (\n          <div className=\"prontoView\">\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }}/>}\n              placeholder=\"Username\"\n              value={email}\n              onChange={e => setEmail(e.target.value)}\n              style={{\n                position: \"absolute\",\n                top: \"40%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            />\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }}/>}\n              placeholder=\"Password\"\n              style={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n              type=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              onClick={() => login({ variables: { email, password } })}\n              style={{\n                position: \"absolute\",\n                top: \"60%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            >\n              Login\n            </Button>\n            <Link\n              style={{\n                position: \"absolute\",\n                top: \"70%\",\n                left: \"45%\"\n              }}\n              to=\"/register\"\n            >\n              or sign up!\n            </Link>\n          </div>\n        );\n      }}\n    </Mutation>\n  );\n};\n","import React from \"react\";\nimport Geosuggest from \"react-geosuggest\";\nimport { Input, Button } from \"antd\";\nimport \"./Geosuggest.css\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nconst onSuggestSelect = (suggest: any) => {\n  if (suggest) {\n    console.log(\n      \"You are going to \" +\n        suggest.label +\n        \" \\nThe coordinates are: \" +\n        suggest.location.lat.toString() +\n        \",\" +\n        suggest.location.lng.toString()\n    );\n  }\n};\n\nexport function MapView() {\n  const MyMap = withScriptjs(\n    withGoogleMap(\n      (props: { children?: React.ReactNode; isMarkerShown?: boolean }) => (\n        <GoogleMap\n          defaultZoom={16}\n          defaultCenter={{ lat: 29.958, lng: 30.958 }}\n          defaultOptions={{\n            disableDefaultUI: true\n          }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              left: \"15%\",\n              top: \"10%\",\n              width: \"60vw\",\n              height: \"25\",\n              textAlign: \"center\"\n            }}\n          >\n            <Geosuggest\n              placeholder={\"Where to?\"}\n              onSuggestSelect={onSuggestSelect}\n            />\n          </div>\n          {props.isMarkerShown && (\n            <Marker position={{ lat: 29.958, lng: 30.958 }} />\n          )}\n        </GoogleMap>\n      )\n    )\n  );\n  return (\n    <MyMap\n      isMarkerShown\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAbzcvcJ23ACYcwyqLGOS1EI9Jwt1Ev6cM&libraries=geometry,drawing,places\"\n      loadingElement={<div style={{ height: `100%` }} />}\n      containerElement={<div style={{ height: `100vh` }} />}\n      mapElement={<div style={{ height: `100%` }} />}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\nimport { Redirect } from \"react-router\";\nimport { Button, Input } from \"antd\";\nimport \"./styling/Pronto.css\";\nimport { Link } from \"react-router-dom\";\n// // TODO\n// Registering logs you in.\nconst RegisterMutation = gql`\n  mutation RegisterMutation(\n    $firstName: String!\n    $email: String!\n    $password: String!\n    $lastName: String!\n    $phone: String!\n  ) {\n    Register(\n      firstName: $firstName\n      email: $email\n      password: $password\n      lastName: $lastName,\n      phone: $phone\n    ) {\n      id\n    }\n  }\n`;\n\nexport const Register = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  // TODO replace option absolute with flex box\n  return (\n    <Mutation mutation={RegisterMutation}>\n      {(register, { data, loading, error }) => {\n        if (data) {\n          // you're now registered, log in\n          return <Redirect to=\"/app\"/>;\n        }\n\n        return (\n          <div className=\"prontoView\">\n            <Input\n              placeholder=\"First Name\"\n              value={firstName}\n              onChange={e => setFirstName(e.target.value)}\n              style={{\n                position: \"absolute\",\n                top: \"15%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            />\n            <Input\n              placeholder=\"Last Name\"\n              value={lastName}\n              onChange={e => setLastName(e.target.value)}\n              style={{\n                position: \"absolute\",\n                top: \"25%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            />\n            <Input\n              placeholder=\"Phone number\"\n              value={phone}\n              type=\"number\"\n              onChange={e => setPhone(e.target.value)}\n              style={{\n                position: \"absolute\",\n                top: \"35%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            />\n            <Input\n              placeholder=\"Email\"\n              value={email}\n              onChange={e => setEmail(e.target.value)}\n              style={{\n                position: \"absolute\",\n                top: \"45%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            />\n            <Input\n              placeholder=\"Password\"\n              style={{\n                position: \"absolute\",\n                top: \"55%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n              type=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              onClick={() =>\n                register({ variables: { email, password, firstName, lastName, phone } })\n              }\n              style={{\n                position: \"absolute\",\n                top: \"65%\",\n                left: \"15%\",\n                width: \"70vw\"\n              }}\n            >\n              Register\n            </Button>\n            <Link\n              style={{\n                position: \"absolute\",\n                top: \"70%\",\n                left: \"45%\"\n              }}\n              to=\"/app\"\n            >\n              or log in!\n            </Link>\n          </div>\n        );\n      }}\n    </Mutation>\n  );\n};\n","// USE only as a reference and replace with an actual component\nimport { Subscription } from \"react-apollo\";\nimport React from \"react\";\nimport { gql } from \"apollo-boost\";\n\nconst TRACK_TRIP_SUBSCRIPTION = gql`\nsubscription TripLocationSubscription($tripId: String!) {\n  TripLocation(tripId: $tripId) {\n    location {\n      x\n      y\n    }\n    id\n    date\n  }\n}`;\n\n// hard coded tripId             v----------------  defining prop type for better auto completion\nexport const TrackTrip: React.FC<{ tripId: string }> = ({ tripId = \"de54b6c3-c3de-40bc-83bc-a95f462f6614\" }) => (\n  <Subscription\n    subscription={TRACK_TRIP_SUBSCRIPTION}\n    variables={{ tripId }}\n  >\n    {({ data, loading }) => {\n      if (data) {\n\n        const { x, y } = data.TripLocation.location;\n        return <div> current location: LON: {x}, LAT: {y} </div>\n      }\n      // waiting for next publish notification\n      return <div>Connecting..</div>\n    }}\n  </Subscription>\n);\n","import { HttpLink, InMemoryCache } from \"apollo-boost\";\nimport { ApolloClient } from \"apollo-client\";\nimport { WebSocketLink } from 'apollo-link-ws';\n\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\n\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000/graphql\"\n});\n\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true\n  }\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    // @ts-ignore\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});","import React from \"react\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { DriverView } from \"./components/DriverView\";\nimport { LandingView } from \"./components/Landing\";\nimport { NotFound } from \"./components/NotFound\";\nimport { Login } from \"./components/Login\";\nimport { MapView } from \"./components/Map\";\nimport { Register } from \"./components/Register\";\nimport { TrackTrip } from \"./components/TrackTrip\";\nimport { client } from \"./apolloClient\";\n\nimport \"./App.css\";\n\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={LandingView}/>\n        <Route path=\"/driver\" component={DriverView}/>\n        <Route path=\"/app\" component={Login}/>\n        <Route path=\"/register\" component={Register}/>\n        <Route path=\"/map\" component={MapView}/>\n        <Route path=\"/track\" component={TrackTrip}/>\n        <Route component={NotFound}/>\n      </Switch>\n    </Router>\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}